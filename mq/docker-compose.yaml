version: "3.7"

services:
  debezium:
    image: debezium/server:2.1.2.Final
    container_name: debezium
    user: "1000:1000"
    ports:
      - "8088:8080"
    environment:
      "quarkus.log.level": "WARN"
      "debezium.sink.type": "redis"
      "debezium.sink.redis.address": "host.docker.internal:6379"
      'debezium.sink.redis.password': "redis-pass"
      "debezium.sink.redis.message.format": 'extended'
      #      "debezium.sink.redis.producer.key.serializer": "org.apache.kafka.common.serialization.StringSerializer"
      #      "debezium.sink.redis.producer.value.serializer": "org.apache.kafka.common.serialization.StringSerializer"
      "debezium.source.connector.class": "io.debezium.connector.mysql.MySqlConnector"
      "debezium.source.database.hostname": "host.docker.internal"
      "debezium.source.database.port": "3306"
      "debezium.source.database.server.id": "5"
      "debezium.source.database.user": "root"
      "debezium.source.database.password": "secret"
      "debezium.source.database.server.name": "chii"
      "debezium.source.database.dbname": "bangumi"
      "debezium.source.database.include.list": "bangumi"
      "debezium.source.table.include.list": "bangumi.chii_members,bangumi.chii_subjects,bangumi.chii_subject_fields"
      "debezium.source.snapshot.mode": "initial"
      "debezium.source.snapshot.locking.mode": "none"
      "quarkus.log.console.json": "false"

      "debezium.source.offset.storage": "io.debezium.storage.redis.offset.RedisOffsetBackingStore"
      "debezium.source.offset.storage.redis.key": "debezium-offset-storage-1"

      "debezium.source.schema.history.internal": "io.debezium.storage.redis.history.RedisSchemaHistory"
      "debezium.source.topic.prefix": "debezium.chii"

    extra_hosts:
      - "host.docker.internal:host-gateway"
